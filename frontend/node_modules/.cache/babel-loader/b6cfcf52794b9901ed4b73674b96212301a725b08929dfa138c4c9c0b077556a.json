{"ast":null,"code":"var _jsxFileName = \"/home/sam_dev/Projects/resume-app/frontend/src/pages/LetterBuilder.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/LetterBuilder.js\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AppContext } from '../App';\nimport api from '../services/api'; // Import our Axios instance for backend calls\nimport { InputField, TextAreaField, Button } from '../components/common'; // Assuming common UI components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoverLetterBuilder = () => {\n  _s();\n  const {\n    userId,\n    showMessage,\n    selectedDocId,\n    setSelectedDocId,\n    setCurrentPage\n  } = useContext(AppContext);\n  const [letterData, setLetterData] = useState({\n    recipientName: '',\n    companyName: '',\n    jobTitle: '',\n    yourName: '',\n    yourContact: '',\n    date: new Date().toISOString().substring(0, 10),\n    // ISO-MM-DD\n    body: ''\n  });\n  const [loadingDoc, setLoadingDoc] = useState(!!selectedDocId); // Loading state for existing doc\n\n  // Load existing document from backend if selectedDocId is set\n  useEffect(() => {\n    const loadDocument = async () => {\n      if (!userId || !selectedDocId) {\n        setLoadingDoc(false);\n        return;\n      }\n      try {\n        const response = await api.get(`/letters/${selectedDocId}`);\n        const data = response.data.data; // The actual letter content is in the 'data' field of the response\n        setLetterData(data);\n        showMessage(\"Cover Letter loaded for editing.\", \"info\");\n      } catch (error) {\n        console.error(\"Error loading cover letter from backend:\", error);\n        showMessage(\"Failed to load cover letter. It might not exist or you don't have access.\", \"error\");\n        setSelectedDocId(null); // Clear selected ID if not found or error\n      } finally {\n        setLoadingDoc(false);\n      }\n    };\n    if (selectedDocId) {\n      loadDocument();\n    } else {\n      setLetterData({\n        recipientName: '',\n        companyName: '',\n        jobTitle: '',\n        yourName: '',\n        yourContact: '',\n        date: new Date().toISOString().substring(0, 10),\n        body: ''\n      });\n      setLoadingDoc(false);\n    }\n  }, [selectedDocId, userId, showMessage, setSelectedDocId]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setLetterData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSaveLetter = async () => {\n    if (!userId) {\n      showMessage(\"Please log in to save documents.\", \"error\");\n      return;\n    }\n    try {\n      // A simple title for the document\n      const docTitle = letterData.jobTitle ? `Cover Letter for ${letterData.jobTitle}` : 'Untitled Cover Letter';\n      if (selectedDocId) {\n        // Update existing document via backend API (PUT request)\n        await api.put(`/letters/${selectedDocId}`, {\n          title: docTitle,\n          data: letterData\n        });\n        showMessage(\"Cover Letter updated successfully!\", \"success\");\n      } else {\n        // Create new document via backend API (POST request)\n        const response = await api.post('/letters', {\n          title: docTitle,\n          data: letterData\n        });\n        showMessage(\"Cover Letter saved successfully!\", \"success\");\n        setSelectedDocId(response.data.id); // Set the new ID for potential further edits\n      }\n      setCurrentPage('dashboard'); // Go back to dashboard after saving\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Error saving cover letter to backend:\", error);\n      showMessage(`Failed to save cover letter: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`, \"error\");\n    }\n  };\n\n  // Placeholder for AI generator feature (still client-side for now)\n  const handleAIGenerate = async () => {\n    showMessage(\"AI Cover Letter Generator feature under development.\", \"info\");\n    // Example AI call (using gemini-2.0-flash as specified)\n    try {\n      let chatHistory = [];\n      const prompt = `Write a professional cover letter body for the position of \"${letterData.jobTitle}\" at \"${letterData.companyName}\". Mention the recipient is \"${letterData.recipientName}\". Emphasize strong communication skills and problem-solving abilities.`;\n      chatHistory.push({\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      });\n      const payload = {\n        contents: chatHistory\n      };\n      const apiKey = \"\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const text = result.candidates[0].content.parts[0].text;\n        setLetterData(prev => ({\n          ...prev,\n          body: text\n        }));\n        showMessage(\"AI generated letter body!\", \"info\");\n      } else {\n        showMessage(\"AI could not generate letter. Please try again.\", \"error\");\n      }\n    } catch (error) {\n      console.error(\"AI generation error:\", error);\n      showMessage(\"Error connecting to AI. Please try again.\", \"error\");\n    }\n  };\n  const handleExportPdf = () => {\n    showMessage(\"PDF export feature coming soon! (Backend integration with Puppeteer/jsPDF is needed)\", \"info\");\n    // In a real application, you would make an API call to your backend\n    // (e.g., api.post('/generate-pdf/letter', { letterData }))\n    // and the backend (using Puppeteer or jsPDF-node) would generate and return the PDF.\n  };\n  if (loadingDoc) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-64\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-700 dark:text-gray-300\",\n        children: \"Loading cover letter data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg mb-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-semibold mb-6 text-center text-blue-600 dark:text-blue-400\",\n      children: selectedDocId ? 'Edit Cover Letter' : 'New Cover Letter'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          label: \"Recipient Name\",\n          name: \"recipientName\",\n          value: letterData.recipientName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          label: \"Company Name\",\n          name: \"companyName\",\n          value: letterData.companyName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          label: \"Job Title Applying For\",\n          name: \"jobTitle\",\n          value: letterData.jobTitle,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          label: \"Your Name\",\n          name: \"yourName\",\n          value: letterData.yourName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          label: \"Your Contact Info (Email, Phone)\",\n          name: \"yourContact\",\n          value: letterData.yourContact,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          label: \"Date\",\n          name: \"date\",\n          type: \"date\",\n          value: letterData.date,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: \"Letter Body\",\n          name: \"body\",\n          value: letterData.body,\n          onChange: handleChange,\n          rows: \"10\",\n          placeholder: \"Start writing your cover letter here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: \"Generate with AI\",\n          onClick: handleAIGenerate,\n          className: \"bg-green-500 text-white hover:bg-green-600 w-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-inner overflow-auto h-full max-h-[80vh] sticky top-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-2xl font-bold text-center text-gray-900 dark:text-gray-100 mb-4\",\n          children: \"Live Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"letter-preview p-5 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-900 shadow-md whitespace-pre-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-right text-sm mb-4\",\n            children: letterData.date || 'YYYY-MM-DD'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-1\",\n            children: letterData.yourName || 'Your Name'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-4\",\n            children: letterData.yourContact || 'Your Contact Info'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-1\",\n            children: letterData.recipientName || 'Recipient Name'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-1\",\n            children: letterData.companyName || 'Company Name'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-4\",\n            children: letterData.jobTitle || 'Job Title'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-4\",\n            children: [\"Dear \", letterData.recipientName || 'Hiring Manager', \",\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 dark:text-gray-300 text-base leading-relaxed\",\n            children: letterData.body || 'This is where your compelling cover letter body will appear. Explain your interest in the role, highlight your relevant skills and experiences, and articulate why you are a strong candidate for the position. Conclude with a call to action and a polite closing.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-8\",\n            children: \"Sincerely,\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-1\",\n            children: letterData.yourName || 'Your Name'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4 mt-8\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        label: selectedDocId ? \"Update Letter\" : \"Save Letter\",\n        onClick: handleSaveLetter,\n        primary: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Export to PDF\",\n        onClick: handleExportPdf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Cancel\",\n        onClick: () => {\n          setSelectedDocId(null);\n          setCurrentPage('dashboard');\n        },\n        className: \"bg-gray-400 text-white hover:bg-gray-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n_s(CoverLetterBuilder, \"NFl/hQOrjcScWdH8lxOXFBFP/Ys=\");\n_c = CoverLetterBuilder;\nexport default CoverLetterBuilder;\nvar _c;\n$RefreshReg$(_c, \"CoverLetterBuilder\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AppContext","api","InputField","TextAreaField","Button","jsxDEV","_jsxDEV","CoverLetterBuilder","_s","userId","showMessage","selectedDocId","setSelectedDocId","setCurrentPage","letterData","setLetterData","recipientName","companyName","jobTitle","yourName","yourContact","date","Date","toISOString","substring","body","loadingDoc","setLoadingDoc","loadDocument","response","get","data","error","console","handleChange","e","name","value","target","prev","handleSaveLetter","docTitle","put","title","post","id","_error$response","_error$response$data","message","handleAIGenerate","chatHistory","prompt","push","role","parts","text","payload","contents","apiKey","apiUrl","fetch","method","headers","JSON","stringify","result","json","candidates","length","content","handleExportPdf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","label","onChange","type","rows","placeholder","onClick","primary","_c","$RefreshReg$"],"sources":["/home/sam_dev/Projects/resume-app/frontend/src/pages/LetterBuilder.js"],"sourcesContent":["// frontend/src/pages/LetterBuilder.js\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AppContext } from '../App';\nimport api from '../services/api'; // Import our Axios instance for backend calls\nimport { InputField, TextAreaField, Button } from '../components/common'; // Assuming common UI components\n\nconst CoverLetterBuilder = () => {\n    const { userId, showMessage, selectedDocId, setSelectedDocId, setCurrentPage } = useContext(AppContext);\n    const [letterData, setLetterData] = useState({\n        recipientName: '',\n        companyName: '',\n        jobTitle: '',\n        yourName: '',\n        yourContact: '',\n        date: new Date().toISOString().substring(0, 10), // ISO-MM-DD\n        body: '',\n    });\n    const [loadingDoc, setLoadingDoc] = useState(!!selectedDocId); // Loading state for existing doc\n\n    // Load existing document from backend if selectedDocId is set\n    useEffect(() => {\n        const loadDocument = async () => {\n            if (!userId || !selectedDocId) {\n                setLoadingDoc(false);\n                return;\n            }\n\n            try {\n                const response = await api.get(`/letters/${selectedDocId}`);\n                const data = response.data.data; // The actual letter content is in the 'data' field of the response\n                setLetterData(data);\n                showMessage(\"Cover Letter loaded for editing.\", \"info\");\n            } catch (error) {\n                console.error(\"Error loading cover letter from backend:\", error);\n                showMessage(\"Failed to load cover letter. It might not exist or you don't have access.\", \"error\");\n                setSelectedDocId(null); // Clear selected ID if not found or error\n            } finally {\n                setLoadingDoc(false);\n            }\n        };\n\n        if (selectedDocId) {\n            loadDocument();\n        } else {\n            setLetterData({\n                recipientName: '',\n                companyName: '',\n                jobTitle: '',\n                yourName: '',\n                yourContact: '',\n                date: new Date().toISOString().substring(0, 10),\n                body: '',\n            });\n            setLoadingDoc(false);\n        }\n    }, [selectedDocId, userId, showMessage, setSelectedDocId]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setLetterData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleSaveLetter = async () => {\n        if (!userId) {\n            showMessage(\"Please log in to save documents.\", \"error\");\n            return;\n        }\n\n        try {\n            // A simple title for the document\n            const docTitle = letterData.jobTitle ? `Cover Letter for ${letterData.jobTitle}` : 'Untitled Cover Letter';\n\n            if (selectedDocId) {\n                // Update existing document via backend API (PUT request)\n                await api.put(`/letters/${selectedDocId}`, {\n                    title: docTitle,\n                    data: letterData,\n                });\n                showMessage(\"Cover Letter updated successfully!\", \"success\");\n            } else {\n                // Create new document via backend API (POST request)\n                const response = await api.post('/letters', {\n                    title: docTitle,\n                    data: letterData,\n                });\n                showMessage(\"Cover Letter saved successfully!\", \"success\");\n                setSelectedDocId(response.data.id); // Set the new ID for potential further edits\n            }\n            setCurrentPage('dashboard'); // Go back to dashboard after saving\n        } catch (error) {\n            console.error(\"Error saving cover letter to backend:\", error);\n            showMessage(`Failed to save cover letter: ${error.response?.data?.message || error.message}`, \"error\");\n        }\n    };\n\n    // Placeholder for AI generator feature (still client-side for now)\n    const handleAIGenerate = async () => {\n        showMessage(\"AI Cover Letter Generator feature under development.\", \"info\");\n        // Example AI call (using gemini-2.0-flash as specified)\n        try {\n            let chatHistory = [];\n            const prompt = `Write a professional cover letter body for the position of \"${letterData.jobTitle}\" at \"${letterData.companyName}\". Mention the recipient is \"${letterData.recipientName}\". Emphasize strong communication skills and problem-solving abilities.`;\n            chatHistory.push({ role: \"user\", parts: [{ text: prompt }] });\n            const payload = { contents: chatHistory };\n            const apiKey = \"\";\n            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n            const response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(payload)\n            });\n            const result = await response.json();\n\n            if (result.candidates && result.candidates.length > 0 &&\n                result.candidates[0].content && result.candidates[0].content.parts &&\n                result.candidates[0].content.parts.length > 0) {\n                const text = result.candidates[0].content.parts[0].text;\n                setLetterData(prev => ({ ...prev, body: text }));\n                showMessage(\"AI generated letter body!\", \"info\");\n            } else {\n                showMessage(\"AI could not generate letter. Please try again.\", \"error\");\n            }\n        } catch (error) {\n            console.error(\"AI generation error:\", error);\n            showMessage(\"Error connecting to AI. Please try again.\", \"error\");\n        }\n    };\n\n    const handleExportPdf = () => {\n        showMessage(\"PDF export feature coming soon! (Backend integration with Puppeteer/jsPDF is needed)\", \"info\");\n        // In a real application, you would make an API call to your backend\n        // (e.g., api.post('/generate-pdf/letter', { letterData }))\n        // and the backend (using Puppeteer or jsPDF-node) would generate and return the PDF.\n    };\n\n    if (loadingDoc) {\n        return (\n            <div className=\"flex justify-center items-center h-64\">\n                <p className=\"text-lg text-gray-700 dark:text-gray-300\">Loading cover letter data...</p>\n            </div>\n        );\n    }\n\n    return (\n        <section className=\"bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg mb-8\">\n            <h2 className=\"text-3xl font-semibold mb-6 text-center text-blue-600 dark:text-blue-400\">{selectedDocId ? 'Edit Cover Letter' : 'New Cover Letter'}</h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Cover Letter Input Form */}\n                <div className=\"space-y-6\">\n                    <InputField label=\"Recipient Name\" name=\"recipientName\" value={letterData.recipientName} onChange={handleChange} />\n                    <InputField label=\"Company Name\" name=\"companyName\" value={letterData.companyName} onChange={handleChange} />\n                    <InputField label=\"Job Title Applying For\" name=\"jobTitle\" value={letterData.jobTitle} onChange={handleChange} />\n                    <InputField label=\"Your Name\" name=\"yourName\" value={letterData.yourName} onChange={handleChange} />\n                    <InputField label=\"Your Contact Info (Email, Phone)\" name=\"yourContact\" value={letterData.yourContact} onChange={handleChange} />\n                    <InputField label=\"Date\" name=\"date\" type=\"date\" value={letterData.date} onChange={handleChange} />\n                    <TextAreaField label=\"Letter Body\" name=\"body\" value={letterData.body} onChange={handleChange} rows=\"10\" placeholder=\"Start writing your cover letter here...\" />\n                    <Button label=\"Generate with AI\" onClick={handleAIGenerate} className=\"bg-green-500 text-white hover:bg-green-600 w-full\" />\n                </div>\n\n                {/* Cover Letter Live Preview */}\n                <div className=\"bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-inner overflow-auto h-full max-h-[80vh] sticky top-4\">\n                    <h3 className=\"text-2xl font-bold text-center text-gray-900 dark:text-gray-100 mb-4\">Live Preview</h3>\n                    <div className=\"letter-preview p-5 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-900 shadow-md whitespace-pre-wrap\">\n                        <p className=\"text-right text-sm mb-4\">{letterData.date || 'YYYY-MM-DD'}</p>\n                        <p className=\"mb-1\">{letterData.yourName || 'Your Name'}</p>\n                        <p className=\"mb-4\">{letterData.yourContact || 'Your Contact Info'}</p>\n\n                        <p className=\"mb-1\">{letterData.recipientName || 'Recipient Name'}</p>\n                        <p className=\"mb-1\">{letterData.companyName || 'Company Name'}</p>\n                        <p className=\"mb-4\">{letterData.jobTitle || 'Job Title'}</p>\n\n                        <p className=\"mb-4\">Dear {letterData.recipientName || 'Hiring Manager'},</p>\n\n                        <p className=\"text-gray-700 dark:text-gray-300 text-base leading-relaxed\">\n                            {letterData.body || 'This is where your compelling cover letter body will appear. Explain your interest in the role, highlight your relevant skills and experiences, and articulate why you are a strong candidate for the position. Conclude with a call to action and a polite closing.'}\n                        </p>\n\n                        <p className=\"mt-8\">Sincerely,</p>\n                        <p className=\"mt-1\">{letterData.yourName || 'Your Name'}</p>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"flex justify-center space-x-4 mt-8\">\n                <Button label={selectedDocId ? \"Update Letter\" : \"Save Letter\"} onClick={handleSaveLetter} primary />\n                <Button label=\"Export to PDF\" onClick={handleExportPdf} />\n                <Button label=\"Cancel\" onClick={() => { setSelectedDocId(null); setCurrentPage('dashboard'); }} className=\"bg-gray-400 text-white hover:bg-gray-500\" />\n            </div>\n        </section>\n    );\n};\n\nexport default CoverLetterBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}