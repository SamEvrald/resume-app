{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\nimport { auth } from './firebase'; // Import Firebase Auth to get the ID token\n\n// Base URL for your Express.js backend API\n// Ensure this matches the PORT in your backend/.env (default 5000)\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add Firebase ID token to outgoing requests\napi.interceptors.request.use(async config => {\n  try {\n    const user = auth.currentUser;\n    if (user) {\n      // Get the Firebase ID token\n      const idToken = await user.getIdToken();\n      // Add the ID token to the Authorization header\n      config.headers.Authorization = `Bearer ${idToken}`;\n    }\n  } catch (error) {\n    console.error('Error getting Firebase ID token:', error);\n    // You might want to handle token retrieval errors, e.g., redirect to login\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","auth","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","user","currentUser","idToken","getIdToken","Authorization","error","console","Promise","reject"],"sources":["/home/sam_dev/Projects/resume-app/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\nimport axios from 'axios';\nimport { auth } from './firebase'; // Import Firebase Auth to get the ID token\n\n// Base URL for your Express.js backend API\n// Ensure this matches the PORT in your backend/.env (default 5000)\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add Firebase ID token to outgoing requests\napi.interceptors.request.use(async (config) => {\n  try {\n    const user = auth.currentUser;\n    if (user) {\n      // Get the Firebase ID token\n      const idToken = await user.getIdToken();\n      // Add the ID token to the Authorization header\n      config.headers.Authorization = `Bearer ${idToken}`;\n    }\n  } catch (error) {\n    console.error('Error getting Firebase ID token:', error);\n    // You might want to handle token retrieval errors, e.g., redirect to login\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\nexport default api;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,YAAY,CAAC,CAAC;;AAEnC;AACA;AACA,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACF,MAAMC,IAAI,GAAGV,IAAI,CAACW,WAAW;IAC7B,IAAID,IAAI,EAAE;MACR;MACA,MAAME,OAAO,GAAG,MAAMF,IAAI,CAACG,UAAU,CAAC,CAAC;MACvC;MACAJ,MAAM,CAACJ,OAAO,CAACS,aAAa,GAAG,UAAUF,OAAO,EAAE;IACpD;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD;EACF;EACA,OAAON,MAAM;AACf,CAAC,EAAGM,KAAK,IAAK;EACZ,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}